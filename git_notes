# install
	apt-get git-core

# global config
	git config --global user.name "eric wang"
	git config --global user.email "ywang496@gatech.edu"

# project-based config
	git config user.name "eric wang"
	git config user.email "ywang496@gatech.edu"

# clone a repo
	git clone <ssh>

# create a new empty repo
	git init

# normal workflow
	* add to index
		git add .
	* diff between index and working dir
		git diff --cached
	* diff made in working dir
		git diff
	* brief summary of modification
		git status
	* commit to (local) repo
		git commit -m "message"

# merge branches
	git merge branch_name
# resolve merge conflicts
	* abort merge
		git merge --abort
	* resolve the conflicts manually
	* use a mergetool

# undo merges
	git reset --hard HEAD

# review history
	* patch: details of a commit
		git log -p
		# display oneliner: short SHA
		git log --oneline --all
		# display full SHA
		git log --format=oneline
	* latest 10 commits
		git log -n 10
		git log -10
	* date range
		git log --since="2014-07-01"
		git log --since="2 weeks ago"
		git log --until="2015-07-01"
	* author
		git log --author="eric"
	* between two commits
		git log acf0809..acao089 --oneline
	* log of a file since one commit
		git log adcf0807.. file_name
	* regular expression to search commit messages
		git log --grep="Init"
	* statistics of a commit: author, date, commit message, #file changed, #insertion, #deletion
		git log --stat

# diff between working dir and index
	git diff
# diff between index and repo
	git diff --staged
	git diff --cached
# changes in working dir since last commit
	git diff HEAD
# diff between two branches
	git diff local_branch remote_branch
# diff between two commits
	git diff 6a3e577 7555e83
# diff of a file
	git diff file_name
# ignore space change
	git diff -w_acf099981 HEAD




repository (aka. database)
working set (files on local machines)
add (insert new files from working set to repository)
commit/check-in (copy changes from working set to repo)
update/check-out (copy changes from repo to working set)
revert/rollback (overwrite files in working set by repo version)

# distributed version control
	* push/export - send changes from one repo to another
	* pull/inport - update working set with updates
	* tag/label - name a specific state of a repo
	* branch/fork - make a clone of a repo
	* merge - integrate branch back into the original repo (trunk/main branch)

# git version
	git --version
# initilize a repo
	git init
# check status
	git status
# insert new files
	git add file_name

# copy from working set to repo
	git add .
	git commit -m "first commit"
# jump the git add
# it won't keep track of deleted and newly added files
	git commit -am "first commit"

# writing commit messages
	* single-line (less than 50 char)
	* multi-line (limit to 72 char each line)
	* in present sense, not past sense
	* asterisks or hyphens instead of bullet points
	* add tracking number

# show author, date, message and diff of a commit
	git show SHA

# check out a file
	git checkout HEAD file_name
# tag
	git tag -a v1.1 -m "label version 1.1"
# check tag
	git tag

# create branch
	git branch branch_name
# switch to branch_name
	git checkout branch_name
# remove files from working tree and staging index
	* move file out of the working set
		git add .
		git commit -m "remove files"
	* git rm file_name
		git add .
		git commit -m "remove files"
# rename
	git mv file_name new_file_name

# undo changes in working set
	git checkout file_name
# stay on current branch
	git checkout -- file_name
# undo changes in staging index
	git reset HEAD file_name
# undo changes in repo
# it can only change the latest commit (won't affect previous commits' SHA)
	git add file_name
	git commit --amend -m "some message"

# retrieving old versions - to staging index
	git checkout SHA -- file_name

# revert a commit
	git revert SHA

# move the HEAD
# does not change staging index or working set
	git reset --soft SHA
# changes staging index to match repo
# does not change working set (default)
	git reset --mixed SHA
# changes staging index and working set to match repo
	git reset --hard SHA

# remove untracked files
	* test remove
		git clean -n
	* force run
		git clean -f

# ignore files
	* in .gitignore file
	* very basic regex: * ? [aeiou] [0-9]
	* negate !index.php

# globally ignore files
	* create .gitignore_global
	* git config --global core.excludefile ~/.gitignore_global
# ignore tracked files
	git rm --cached file_name
# track empty directory
# create a .gitkeep file in the directory
	touch .gitkeep

#reference to a commit
	* full SHA-1 hash
	* short SHA-1 hash
		- at least 4 chars
		- unambiguous (8 - 10 chars)
	* HEAD pointer
	* branch ref, tag ref
	* ancestry
		- HEAD^, acf89701^, master^, HEAD~1, HEAD~
		- HEAD^^, acf80798^^, master^^

# tree-ish
# reference to directories (trees)
	git ls-tree HEAD
	git ls-tree master
	git ls-tree master^ folder/

# centralized version control flow
	* working set
	* remote repo

# distributed
	* working set
	* local repo
	* remote repo

# two-tree architecture
	* working -> commit -> repo
	* repo -> checkout -> working
# three-tree architecture: git
	* working -> staging index -> repo
					git add		     git commit
# SHA-1 hash algo: 40 char hexdecimal string

# HEAD pointer
	* point to "tip" of current branch in repo (the latest commit)
	* last state of repo, what was last checked out
	* points to parent of next commit

# create a branch
	git branch new_branch
# switch to a branch
	git checkout new_branch
# create and switch at the same time
	git checkout -b new_branch
# switch braches with uncommited changes
	* three methods:
		- git checkout -- file_name
 		- git commit -am "some message"
 		- git stash save "some stash message"
# check if one branch include another
	git branch --merged
# rename a branch
	git branch -m old_branch new_branch
# delete a branch
	git branch -d branch_name

# save stash
	git stash save "some stash message"
# stash list
	git stash list
# show stash
	git stash show -p stash@{0}
# retrieve stashed changes
# it will pop out from the stash queue
	git stash pop stash@{0}
# retrieve but leave a copy in stash
	git stash apply stash@{0}
# delete an item from stash
	git stash drop stash@{0}
# delete all items in stash
	git stash clear

# github/remote
	git remote add origin (ssh)
	git push -u origin master
# list all remotes
	git remote
# delete remotes
	git remote rm origin
# clone a remote repo
	git clone (ssh)
# tracking remote branches
	git add .
	git commit -m "some message"
	git push
# fetch changes from remote
	git fetch
	* always fetch before work
	* fetch before you push
	* fetch often
# merge in fetched changes
	git merge origin/master
# pull
	git pull = git fetch + git merge
# checkout remote branches
	git branch branch_name remote_branch_name
	git checkout -b branch_name remote_branch_name
# delete a remote branch
	git push origin :branch_name
	git push origin --delete branch_name

# sync a fork
	git remote add upstream (ssh)
	git remote -v
	git fetch upstream
	git merge upstream/master
	# resolve the conflicts manually and commit
	git commit -am "some message"
